{"version":3,"file":"assets/js/8409d26b.e173edbc.js","mappings":"0qqlBAuFO,SAASA,EAAWC,EAAmCC,GAC1D,QAD8D,IAAJA,IAAAA,EAAO,IAC5DD,EACD,OAAO,KAGX,OAAQA,EAAME,MACV,IAAK,QACD,MAAQ,GAAEH,EAAWC,EAAMA,WAC/B,IAAK,UACD,MAAQ,IAAGA,EAAMA,SACrB,IAAK,YACD,OAAOA,EAAMA,MACjB,IAAK,KACD,MAAQ,GAAEA,EAAMG,OACXC,KAAKC,IACF,MAAMC,EACS,OAAXD,EAAEH,MAA4B,iBAAXG,EAAEH,KACnBK,EAAOR,EAAWM,GACxB,OAAOC,EAAgB,IAAGC,KAAUA,CAAI,IAE3CC,KAAK,SACd,IAAK,eACD,MAAQ,GAAER,EAAMG,OACXC,KAAKC,IACF,MAAMC,EACS,OAAXD,EAAEH,MAA4B,iBAAXG,EAAEH,KACnBK,EAAOR,EAAWM,GACxB,OAAOC,EAAgB,IAAGC,KAAUA,CAAI,IAE3CC,KAAK,SACd,IAAK,YACD,MAAQ,GAAER,EAAMS,UAAUT,EAAMU,MAEpC,IAAK,YACD,OAAIV,EAAMW,cACE,GAAEX,EAAMA,SAASA,EAAMW,cAAcP,IAAIL,MAE7C,GAAEC,EAAMA,QAEpB,IAAK,aACD,OAAOY,EAAOZ,EAAMA,MAAOC,GAC/B,IAAK,QACD,MAAQ,IAAGD,EAAMA,MAAMI,IAAIL,GAAYS,KAAK,SAChD,QACI,MAAM,IAAIK,MAAM,eAE5B,CAEO,SAASD,EAAOZ,EAA+BC,GAClD,QADsD,IAAJA,IAAAA,EAAO,IACpDD,EACD,OAAO,KAGX,GAAmB,aAAfA,EAAMc,KAAqB,CAC3B,MAAMC,EAAYf,EAAMA,MACxB,MAAQ,GAAE,KAAKgB,OAAOf,KAAQc,EAAUE,SAASlB,EAC7CgB,EAAUG,aAElB,CAEA,GAAmB,aAAflB,EAAMc,KAAqB,CAC3B,IAAIP,EAAO,KAAKS,OAAOf,GAevB,OAbID,EAAMmB,MAAMC,cACZb,GAAQ,cAGRP,EAAMmB,MAAME,aACZd,GAAQ,aAEZA,GAAQP,EAAMiB,KACVjB,EAAMmB,MAAMG,aACZf,GAAQ,KAGZA,GAAS,KAAIR,EAAWC,EAAME,KAAMD,EAAO,KACpCM,CACX,CAEA,GAAmB,WAAfP,EAAMc,KACN,MAAQ,GAAE,KAAKE,OAAOf,KAAQD,EAAMiB,OAAOjB,EAAMe,UAC5CX,IAAIQ,GACJJ,KAAK,QAGd,GAAmB,kBAAfR,EAAMc,KAA0B,CAChC,IAAIP,EAAQ,GA+BZ,OA7BIP,EAAMuB,eAAeC,OAAS,IAC9BjB,GAAQ,IACRA,GAAQP,EAAMuB,eAAenB,KAAKqB,IAC9B,IAAIC,EAAY,GAAED,EAAcR,OAWhC,OATIQ,EAAcE,UACdD,GAAY,WACZA,GAAa,IAAG3B,EAAW0B,EAAcE,YAGzCF,EAAcG,UACdF,GAAY,KACZA,GAAa,IAAGD,EAAcG,WAE3BF,CAAQ,IAEnBnB,GAAQ,KAGZA,GAAQ,IAERA,GAAQP,EAAM6B,WACTzB,KAAK0B,GACKlB,EAAOkB,EAAW7B,EAAO,KAEnCO,KAAK,MAEVD,GAAS,MAAKR,EAAWC,EAAMkB,cAExBX,CACX,CAEA,GAAmB,cAAfP,EAAMc,KACN,MAAQ,GAAEd,EAAMiB,SAASlB,EAAWC,EAAME,KAAMD,EAAO,KAG3D,GAAmB,gBAAfD,EAAMc,KAAwB,CAC9B,GAAId,EAAM+B,WACN,MAAQ,MAAK/B,EAAM+B,WACd3B,KAAKC,GAAMO,EAAOP,EAAGJ,KACrBO,KAAK,WAAW,KAAKQ,OAAOgB,KAAKC,IAAI,EAAGhC,EAAO,OAExD,GAAID,EAAMkC,WACN,OAAOlC,EAAMkC,WAAW9B,IAAIQ,GAAQJ,KAAK,KAEjD,CAEA,GAAmB,gBAAfR,EAAMc,KACN,MAAO,GAGX,GAAmB,cAAfd,EAAMc,KACN,MAAQ,aAAYd,EAAMiB,WAAWjB,EAAMmC,SACtC/B,KAAKC,GAAMO,EAAOP,EAAGJ,EAAO,KAC5BO,KAAK,aAGd,GAAmB,UAAfR,EAAMc,KACN,MAAQ,aAAYd,EAAMiB,WAAWjB,EAAMmC,SACtCC,QAAQ/B,GAAiB,gBAAXA,EAAES,OAChBV,KAAKC,GAAMO,EAAOP,EAAGJ,EAAO,KAC5BO,KAAK,aAGd,GAAmB,cAAfR,EAAMc,KACN,MAAQ,QAAOd,EAAMiB,UAAUlB,EAAWC,EAAME,QAIpD,MADAmC,QAAQC,IAAI,cAAetC,GACrB,IAAIa,MAAO,cACrB,C,cC1OA,MAgCM0B,EAAUC,EA6BHC,EAAQC,IAEbC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUT,SACpBO,EAAMG,QAAQzC,KAAI,CAAC0C,EAAOC,KACvB,OAAQD,EAAMhC,MACV,IAAK,OACD,OAAO6B,EAAAA,EAAAA,KAAA,QAAAR,SAAeW,EAAME,MAAVD,GAEtB,IAAK,OACD,OACIJ,EAAAA,EAAAA,KAAA,QAAAR,SACKW,EAAME,KAAKC,UAAU,EAAGH,EAAME,KAAKxB,OAAS,IADtCuB,GAInB,QACI,MAAM,IAAIlC,MAAO,mBAAkBiC,EAAMhC,QACjD,MAMHoC,EAAQR,IAEbC,EAAAA,EAAAA,KAAA,OAAAR,SACKO,EAAMS,KAAK/C,KAAI,CAACgD,EAAKL,KAEdM,EAAAA,EAAAA,MAAA,OAAAlB,SAAA,EACIQ,EAAAA,EAAAA,KAAA,OAAAR,SAAMiB,EAAIA,OACVT,EAAAA,EAAAA,KAACF,EAAI,CAACI,QAASO,EAAIP,YAFbE,OAUjBO,EAAWZ,IAEhBW,EAAAA,EAAAA,MAAA,OAAAlB,SAAA,EACIQ,EAAAA,EAAAA,KAACF,EAAI,CAACI,QAASH,EAAMa,QAAQA,SAAW,MACxCZ,EAAAA,EAAAA,KAACO,EAAI,CAACC,KAAMT,EAAMa,QAAQC,WAAa,QAS7CC,EAAOf,IACT,MAAMgB,EACiB,aAAnBhB,EAAMiB,IAAI7C,KACJ4B,EAAMiB,IAAI3D,MAAM0D,QAChBhB,EAAMiB,IAAID,QACpB,OACIL,EAAAA,EAAAA,MAAA,MAAAlB,SAAA,EACIQ,EAAAA,EAAAA,KAAA,MACIiB,MAAO,CACHC,MAAO,MACPC,QAAS,QACX3B,UAEFkB,EAAAA,EAAAA,MAAA,OACIO,MAAO,CACHE,QAAS,OACTC,cAAe,SACfC,WAAY,SACd7B,SAAA,EAEFQ,EAAAA,EAAAA,KAAA,MACIiB,MAAO,CACHK,WAAY,YACZC,SAAU,SACZ/B,SAEDO,EAAMiB,IAAI1C,QAEf0B,EAAAA,EAAAA,KAAA,OACIiB,MAAO,CACHE,QAAS,OACTC,cAAe,SACfC,WAAY,iBAqB5BrB,EAAAA,EAAAA,KAAA,MAAIiB,MAAO,CAAEC,MAAO,OAAQ1B,UAExBkB,EAAAA,EAAAA,MAAA,OAAAlB,SAAA,EACIQ,EAAAA,EAAAA,KAAA,OAAAR,SAAMuB,IAAWf,EAAAA,EAAAA,KAACW,EAAO,CAACC,QAASG,OACnCf,EAAAA,EAAAA,KAACwB,EAAAA,EAAS,CAACC,SAAS,MAAKjC,SAAEvB,EAAO8B,EAAMiB,cAG/C,EAIb,SAASvB,EAAOiC,EAAuBC,GACnC,GAAkB,cAAdD,EAAKvD,KACL,MAAuB,iBAAnBuD,EAAKnE,KAAKA,KACHmE,EAAKnE,KAAKC,OACZC,KAAKJ,GAAUuC,EAASvC,EAAcA,SACtCI,KAAKmE,GAAMnC,EAAOmC,EAAGD,KACrBE,OAGF,CAACH,GAGZ,GAAkB,UAAdA,EAAKvD,MAAkC,cAAduD,EAAKvD,KAAsB,CAKpD,OAJiBuD,EAAK1C,QAAQ8C,SAASxD,GACnCmB,EAAOG,EAAQtB,GAAOqD,KAGVI,OACZL,EAAKlC,SAASC,QAAQuC,KACdL,IAAYA,EAAQM,SAASD,EAAM1D,SAMnD,CAEA,MAAO,EACX,CAEO,MAAM4D,EAAUnC,IACnB,MAAM2B,EAAOS,EAAAA,SACT,IAAMvC,EAAQG,EAAMqC,cACpB,CAACrC,EAAMqC,cAGLC,EAAeF,EAAAA,SACjB,IAAM1C,EAAOiC,EAAM3B,EAAM4B,UACzB,CAACD,IAGL,OAAKA,GAKD1B,EAAAA,EAAAA,KAAA,SAAOC,UAAU,gBAAeT,UAC5BQ,EAAAA,EAAAA,KAAA,SAAAR,SACK6C,EAAa5E,KAAI,CAACuD,EAAKZ,KAEhBJ,EAAAA,EAAAA,KAAAsC,EAAAA,SAAA,CAAA9C,UACIQ,EAAAA,EAAAA,KAACc,EAAG,CAASE,IAAKA,GAARZ,YATvBJ,EAAAA,EAAAA,KAAA,QAAAR,SAAQ,4BAA2BO,EAAMqC,gBA4BxC,C,4JC9PT,MAAMG,EAAc,CAC1BC,MAAO,eAEKC,OAAeC,EACfC,EAAW,CACtB,GAAM,0BACN,MAAS,cACT,YAAe,iHACf,OAAU,yCACV,cAAiB,cACjB,KAAQ,2BACR,UAAa,gCACb,OAAS,EACT,UAAY,EACZ,KAAQ,GACR,QAAW,UACX,YAAe,CACb,MAAS,eAEX,QAAW,kBACX,SAAY,CACV,MAAS,aACT,UAAa,0BAEf,KAAQ,CACN,MAAS,iBACT,UAAa,+BAGJC,EAAS,CAEtB,EAKaC,EAAM,CAAC,CAClB,MAAS,eACT,GAAM,eACN,MAAS,IAEX,SAASC,EAAkB/C,GACzB,MAAMgD,EAAc,CAClBC,WAAY,aACZC,GAAI,KACJC,EAAG,QACA,YACAnD,EAAMoD,aACR,WAACC,GAAcL,EAElB,OADKK,GA8BP,SAA8BC,EAAIC,GAChC,MAAM,IAAIpF,MAAM,aAAeoF,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,CAhCmBE,CAAqB,cAAc,IAC7C,UAAM,WAAW,CACtB/D,SAAU,EAAC,SAAKuD,EAAYC,WAAY,CACtCzF,KAAM,UACNiC,UAAU,SAAKuD,EAAYG,EAAG,CAC5B1D,SAAU,qHAEV,MAAM,SAAK,KAAQ,CACrB4C,YAAa,wBACbT,QAAS,CAAC,iBAAkB,4BAC1B,MAAM,SAAKoB,EAAYE,GAAI,CAC7BI,GAAI,eACJ7D,SAAU,iBACR,MAAM,SAAK4D,EAAY,CACzBC,GAAI,2BAGV,CACe,SAASG,EAAWzD,EAAQ,CAAC,GAC1C,MAAO0D,QAASC,GAAa,KACxB,YACA3D,EAAMoD,YAEX,OAAOO,GAAY,SAAKA,EAAW,IAC9B3D,EACHP,UAAU,SAAKsD,EAAmB,IAC7B/C,MAEF+C,EAAkB/C,EACzB,C","sources":["webpack://dockview-docs/./src/components/ui/reference/types.ts","webpack://dockview-docs/./src/components/ui/reference/docRef.tsx","webpack://dockview-docs/./docs/core/groups/constraints.mdx"],"sourcesContent":["export type ExportedTypeFile = Record<string, TypeSystem.Type>;\n\nexport function firstLevelTypes(value: TypeDescriptor.Type | null) {\n    if (!value) {\n        return null;\n    }\n\n    switch (value.type) {\n        case 'array':\n            return firstLevelTypes(value.value);\n        case 'literal':\n            return [];\n        case 'intrinsic':\n            return [];\n        case 'or':\n            return value.values.flatMap(firstLevelTypes);\n        case 'intersection':\n            return value.values.flatMap(firstLevelTypes);\n        case 'predicate':\n            return [];\n        case 'reference': {\n            const result = [];\n            if (\n                value.source.startsWith('dockview') &&\n                !value.refersToTypeParameter\n            ) {\n                result.push(value.value);\n            }\n            if (value.typeArguments) {\n                result.push(...value.typeArguments.flatMap(firstLevelTypes));\n            }\n            return result;\n        }\n        case 'reflection':\n            return firstLevel(value.value);\n        case 'tuple':\n            return value.value.map(codifyType);\n        default:\n            throw new Error('unreachable');\n    }\n}\n\nexport function firstLevel(value: TypeSystem.Type | null) {\n    const results: string[] = [];\n\n    switch (value.kind) {\n        case null:\n            break;\n        case 'property':\n            results.push(...firstLevelTypes(value.type));\n            break;\n        case 'accessor':\n            results.push(...firstLevelTypes(value.value.returnType));\n            break;\n        case 'method':\n            results.push(...value.signature.flatMap(firstLevel));\n            break;\n        case 'constructor':\n            break;\n        case 'typeLiteral':\n            if (value.properties) {\n                results.push(...value.properties.flatMap(firstLevel));\n            }\n            if (value.signatures) {\n                results.push(...value.signatures.flatMap(firstLevel));\n            }\n            break;\n        case 'callSignature':\n            results.push(\n                ...firstLevelTypes(value.returnType),\n                ...value.typeParameters.flatMap((_) => {\n                    return [...firstLevelTypes(_.extends)];\n                }),\n                ...value.parameters.flatMap(firstLevel)\n            );\n            break;\n        case 'parameter':\n            results.push(...firstLevelTypes(value.type));\n            break;\n        default:\n            console.log('test', value);\n            throw new Error('unreachable');\n    }\n\n    return Array.from(new Set(results));\n}\n\nexport function codifyType(value: TypeDescriptor.Type | null, tabs = 0) {\n    if (!value) {\n        return null;\n    }\n\n    switch (value.type) {\n        case 'array':\n            return `${codifyType(value.value)}[]`;\n        case 'literal':\n            return `'${value.value}'`;\n        case 'intrinsic':\n            return value.value;\n        case 'or':\n            return `${value.values\n                .map((_) => {\n                    const isComparator =\n                        _.type === 'or' || _.type === 'intersection';\n                    const code = codifyType(_);\n                    return isComparator ? `(${code})` : code;\n                })\n                .join(' | ')}`;\n        case 'intersection':\n            return `${value.values\n                .map((_) => {\n                    const isComparator =\n                        _.type === 'or' || _.type === 'intersection';\n                    const code = codifyType(_);\n                    return isComparator ? `(${code})` : code;\n                })\n                .join(' & ')}`;\n        case 'predicate':\n            return `${value.lhs} is ${value.rhs}`;\n\n        case 'reference': {\n            if (value.typeArguments) {\n                return `${value.value}<${value.typeArguments.map(codifyType)}>`;\n            }\n            return `${value.value}`;\n        }\n        case 'reflection':\n            return codify(value.value, tabs);\n        case 'tuple':\n            return `[${value.value.map(codifyType).join(', ')}]`;\n        default:\n            throw new Error('unreachable');\n    }\n}\n\nexport function codify(value: TypeSystem.Type | null, tabs = 0) {\n    if (!value) {\n        return null;\n    }\n\n    if (value.kind === 'accessor') {\n        const signature = value.value;\n        return `${'\\t'.repeat(tabs)}${signature.name}: ${codifyType(\n            signature.returnType\n        )}`;\n    }\n\n    if (value.kind === 'property') {\n        let code = '\\t'.repeat(tabs);\n\n        if (value.flags.isProtected) {\n            code += 'protected ';\n        }\n\n        if (value.flags.isReadonly) {\n            code += 'readonly ';\n        }\n        code += value.name;\n        if (value.flags.isOptional) {\n            code += '?';\n        }\n\n        code += `: ${codifyType(value.type, tabs + 1)}`;\n        return code;\n    }\n\n    if (value.kind === 'method') {\n        return `${'\\t'.repeat(tabs)}${value.name}${value.signature\n            .map(codify)\n            .join('\\n')}`;\n    }\n\n    if (value.kind === 'callSignature') {\n        let code = ``;\n\n        if (value.typeParameters.length > 0) {\n            code += '<';\n            code += value.typeParameters.map((typeParameter) => {\n                let typeCode = `${typeParameter.name}`;\n\n                if (typeParameter.extends) {\n                    typeCode += ' extends';\n                    typeCode += ` ${codifyType(typeParameter.extends)}`;\n                }\n\n                if (typeParameter.default) {\n                    typeCode += ' =';\n                    typeCode += ` ${typeParameter.default}`;\n                }\n                return typeCode;\n            });\n            code += '>';\n        }\n\n        code += '(';\n\n        code += value.parameters\n            .map((parameter) => {\n                return codify(parameter, tabs + 1);\n            })\n            .join(', ');\n\n        code += `): ${codifyType(value.returnType)}`;\n\n        return code;\n    }\n\n    if (value.kind === 'parameter') {\n        return `${value.name}: ${codifyType(value.type, tabs + 1)}`;\n    }\n\n    if (value.kind === 'typeLiteral') {\n        if (value.properties) {\n            return `{\\n${value.properties\n                .map((_) => codify(_, tabs))\n                .join(',\\n')}\\n${'\\t'.repeat(Math.max(0, tabs - 1))}}`;\n        }\n        if (value.signatures) {\n            return value.signatures.map(codify).join('\\n');\n        }\n    }\n\n    if (value.kind === 'constructor') {\n        return '';\n    }\n\n    if (value.kind === 'interface') {\n        return `interface ${value.name} {\\n${value.children\n            .map((_) => codify(_, tabs + 1))\n            .join(';\\n')};\\n}`;\n    }\n\n    if (value.kind === 'class') {\n        return `interface ${value.name} {\\n${value.children\n            .filter((_) => _.kind !== 'constructor')\n            .map((_) => codify(_, tabs + 1))\n            .join(';\\n')};\\n}`;\n    }\n\n    if (value.kind === 'typeAlias') {\n        return `type ${value.name} = ${codifyType(value.type)}`;\n    }\n\n    console.log('unreachable', value);\n    throw new Error(`unreachable`);\n}\n\nexport namespace TypeSystem {\n    export type Comment = any;\n\n    export type TypeParameter = {\n        name: string;\n        extends: TypeDescriptor.Type;\n        default: string;\n        comment?: Comment;\n    };\n\n    export type Accessor = {\n        name: string;\n        kind: 'accessor';\n        comment?: Comment;\n        value: TypeSystem.GetSignature;\n    };\n\n    export type GetSignature = {\n        kind: 'getSignature';\n        name: string;\n        returnType: TypeDescriptor.Type;\n        comment?: Comment;\n    };\n\n    export type CallSignature = {\n        kind: 'callSignature';\n        typeParameters: TypeSystem.TypeParameter[];\n        parameters: TypeSystem.Type[];\n        returnType: TypeDescriptor.Type;\n        name: string;\n        comment?: Comment;\n    };\n\n    export type Method = {\n        name: string;\n        kind: 'method';\n        signature: TypeSystem.CallSignature[];\n        comment?: Comment;\n    };\n\n    export type Function = {\n        name: string;\n        kind: 'function';\n        signature: TypeSystem.CallSignature;\n        comment?: Comment;\n    };\n\n    export type Property = {\n        kind: 'property';\n        name: string;\n        type: TypeDescriptor.Type;\n        flags: TypeDescriptor.Flags;\n        comment?: Comment;\n    };\n\n    export type TypeAlias = {\n        name: string;\n        kind: 'typeAlias';\n        typeParameters: TypeSystem.TypeParameter[];\n        type: TypeDescriptor.Type;\n        comment?: Comment;\n    };\n\n    export type Enum = {\n        name: string;\n        kind: 'enum';\n        children: TypeSystem.EnumMember[];\n        comment?: Comment;\n    };\n\n    export type EnumMember = {\n        kind: 'enumMember';\n        name: string;\n        comment?: Comment;\n    };\n\n    export type Class = {\n        name: string;\n        kind: 'class';\n        children: TypeSystem.Type[];\n        extends: string[];\n        comment?: Comment;\n    };\n\n    export type Interface = {\n        name: string;\n        kind: 'interface';\n        children: TypeSystem.Type[];\n        comment?: Comment;\n        extends: string[];\n    };\n\n    export type Parameter = {\n        name: string;\n        kind: 'parameter';\n        type: TypeDescriptor.Type;\n        comment?: Comment;\n    };\n\n    export type Constructor = {\n        kind: 'constructor';\n        name: string;\n        comment?: Comment;\n    };\n\n    export type ConstructorSignature = {\n        kind: 'constructorSignature';\n        name: string;\n        comment?: Comment;\n    };\n\n    export type TypeLiteral = {\n        kind: 'typeLiteral';\n        name: string;\n        signatures?: (ConstructorSignature | TypeSystem.CallSignature)[];\n        properties?: TypeSystem.Property[];\n        comment?: Comment;\n    };\n\n    export type Type =\n        | TypeSystem.Accessor\n        | TypeSystem.GetSignature\n        | TypeSystem.CallSignature\n        | TypeSystem.Method\n        | TypeSystem.Property\n        | TypeSystem.TypeAlias\n        | TypeSystem.Enum\n        | TypeSystem.EnumMember\n        | TypeSystem.Class\n        | TypeSystem.Constructor\n        | TypeSystem.ConstructorSignature\n        | TypeSystem.TypeLiteral\n        | TypeSystem.Parameter\n        | TypeSystem.Interface\n        | TypeSystem.Function;\n}\n\nexport namespace TypeDescriptor {\n    export interface Union {\n        type: 'or';\n        values: TypeDescriptor.Type[];\n    }\n\n    export interface Intrinsic {\n        type: 'intrinsic';\n        value: string;\n    }\n\n    export interface Literal {\n        type: 'literal';\n        value: string;\n    }\n\n    export type Reflection = { type: 'reflection'; value: TypeSystem.Type };\n\n    export interface Reference {\n        type: 'reference';\n        value: string;\n        source: string;\n        typeArguments?: TypeDescriptor.Type[];\n        refersToTypeParameter?: boolean;\n    }\n\n    export interface Array {\n        type: 'array';\n        value: TypeDescriptor.Type;\n    }\n\n    export interface Intersection {\n        type: 'intersection';\n        values: TypeDescriptor.Type[];\n    }\n\n    export interface Predicate {\n        type: 'predicate';\n        lhs: string;\n        rhs: TypeDescriptor.Type;\n    }\n\n    export interface Tuple {\n        type: 'tuple';\n        value: TypeDescriptor.Type[];\n    }\n\n    export type Type =\n        | TypeDescriptor.Union\n        | TypeDescriptor.Intrinsic\n        | TypeDescriptor.Literal\n        | TypeDescriptor.Reflection\n        | TypeDescriptor.Reference\n        | TypeDescriptor.Array\n        | TypeDescriptor.Intersection\n        | TypeDescriptor.Predicate\n        | TypeDescriptor.Tuple;\n\n    export type Flags = {\n        isReadonly?: boolean;\n        isProtected?: boolean;\n        isOptional?: boolean;\n    };\n}\n","import * as React from 'react';\nimport CodeBlock from '@theme/CodeBlock';\nimport './docRef.scss';\n\nexport interface DocRefProps {\n    declaration: string;\n    methods?: string[];\n}\n\nimport docsJson_ from '../../../generated/api.output.json';\nimport { ExportedTypeFile, TypeSystem, codify, firstLevel } from './types';\nconst docsJson = docsJson_ as any as DocsJson;\n\ntype DocsContent = { kind: string; text: string; tag?: string };\ntype DocsTag = { tag: string; content: DocsContent[] };\ntype DocsComment = {\n    summary?: DocsContent[];\n    blockTags?: DocsTag[];\n};\n\ntype Piece = {\n    kind: 'return' | 'paramter' | 'signature' | 'typearg' | 'typearg_default';\n    value: string;\n};\n\ntype Doc = {\n    name: string;\n    code: string;\n    comment?: DocsComment;\n    kind: 'accessor' | 'property' | 'method';\n    pieces: Piece[];\n};\n\ntype DocJson = {\n    kind: string;\n    metadata?: Doc;\n    children: Doc[];\n};\n\ntype DocsJson = {\n    [index: string]: DocJson;\n};\n\nconst newJson = docsJson_ as ExportedTypeFile;\n\nexport const DocumentRef = (props: { value: TypeSystem.Type }) => {\n    const code = React.useMemo(() => {\n        if (!props.value) {\n            return null;\n        }\n\n        switch (props.value.kind) {\n            case 'typeAlias':\n                return codify(props.value);\n            case 'interface':\n                return codify(props.value);\n            case 'class':\n                return codify(props.value);\n            case 'function':\n                return codify(props.value);\n            default:\n                return null;\n        }\n    }, [props.value]);\n\n    if (!code) {\n        return null;\n    }\n\n    return <CodeBlock language=\"tsx\">{code}</CodeBlock>;\n};\n\nexport const Text = (props: { content: DocsContent[] }) => {\n    return (\n        <div className=\"doc-text\">\n            {props.content.map((piece, i) => {\n                switch (piece.kind) {\n                    case 'text': {\n                        return <span key={i}>{piece.text}</span>;\n                    }\n                    case 'code':\n                        return (\n                            <code key={i}>\n                                {piece.text.substring(1, piece.text.length - 1)}\n                            </code>\n                        );\n                    default:\n                        throw new Error(`unhandled piece ${piece.kind}`);\n                }\n            })}\n        </div>\n    );\n};\n\nexport const Tags = (props: { tags: DocsTag[] }) => {\n    return (\n        <div>\n            {props.tags.map((tag, i) => {\n                return (\n                    <div key={i}>\n                        <div>{tag.tag}</div>\n                        <Text content={tag.content} />\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport const Summary = (props: { summary: DocsComment }) => {\n    return (\n        <div>\n            <Text content={props.summary.summary ?? []} />\n            <Tags tags={props.summary.blockTags ?? []} />\n        </div>\n    );\n};\n\nexport const Markdown = (props: { children: string }) => {\n    return <span>{props.children}</span>;\n};\n\nconst Row = (props: { doc: TypeSystem.Type }) => {\n    const comment =\n        props.doc.kind === 'accessor'\n            ? props.doc.value.comment\n            : props.doc.comment;\n    return (\n        <tr>\n            <th\n                style={{\n                    width: '40%',\n                    display: 'flex',\n                }}\n            >\n                <div\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'start',\n                    }}\n                >\n                    <h6\n                        style={{\n                            fontFamily: 'monospace',\n                            fontSize: '1.2em',\n                        }}\n                    >\n                        {props.doc.name}\n                    </h6>\n                    <div\n                        style={{\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'start',\n                        }}\n                    >\n                        {/* <span\n                            style={{\n                                fontSize: '0.75em',\n                                color: 'var(--ifm-color-content-secondary)',\n                            }}\n                        >\n                            {'Type'}\n                        </span>\n                        <span\n                            style={{\n                                color: 'var(--ifm-color-primary)',\n                            }}\n                        >\n                            {doc.type}\n                        </span> */}\n                    </div>\n                </div>\n            </th>\n            <th style={{ width: '60%' }}>\n                {/* <div>{'-'}</div> */}\n                <div>\n                    <div>{comment && <Summary summary={comment} />}</div>\n                    <CodeBlock language=\"tsx\">{codify(props.doc)}</CodeBlock>\n                </div>\n            </th>\n        </tr>\n    );\n};\n\nfunction filter(docs: TypeSystem.Type, methods: string[]) {\n    if (docs.kind === 'typeAlias') {\n        if (docs.type.type === 'intersection') {\n            return docs.type.values\n                .map((value) => newJson[(value as any).value])\n                .map((v) => filter(v, methods))\n                .flat();\n        }\n\n        return [docs];\n    }\n\n    if (docs.kind === 'class' || docs.kind === 'interface') {\n        const extended = docs.extends.flatMap((name) =>\n            filter(newJson[name], methods)\n        );\n\n        return extended.concat(\n            docs.children.filter((child) => {\n                if (methods && !methods.includes(child.name)) {\n                    return false;\n                }\n                return true;\n            })\n        );\n    }\n\n    return [];\n}\n\nexport const DocRef = (props: DocRefProps) => {\n    const docs = React.useMemo(\n        () => newJson[props.declaration],\n        [props.declaration]\n    );\n\n    const filteredDocs = React.useMemo(\n        () => filter(docs, props.methods),\n        [docs]\n    );\n\n    if (!docs) {\n        return <span>{`Failed to find docs for '${props.declaration}'`}</span>;\n    }\n\n    return (\n        <table className=\"doc-ref-table\">\n            <tbody>\n                {filteredDocs.map((doc, i) => {\n                    return (\n                        <>\n                            <Row key={i} doc={doc} />\n                            {/* <th colSpan={2}>\n                                {firstLevel(doc).map((x) => (\n                                    <span style={{ padding: '0px 2px' }}>\n                                        <DocumentRef value={newJson[x]} />\n                                    </span>\n                                ))}\n                            </th> */}\n                            {/* {doc.pieces?.map((piece) => (\n                                <tr>\n                                    <th colSpan={2}>\n                                        <Piece piece={piece} />\n                                    </th>\n                                </tr>\n                            ))} */}\n                        </>\n                    );\n                })}\n            </tbody>\n        </table>\n    );\n};\n","\n\nexport const frontMatter = {\n\ttitle: 'Constraints'\n};\nexport const contentTitle = undefined;\nexport const metadata = {\n  \"id\": \"core/groups/constraints\",\n  \"title\": \"Constraints\",\n  \"description\": \"Constraints come with several caveats. They are not serialized with layouts and can only be applied to groups.\",\n  \"source\": \"@site/docs/core/groups/constraints.mdx\",\n  \"sourceDirName\": \"core/groups\",\n  \"slug\": \"/core/groups/constraints\",\n  \"permalink\": \"/docs/core/groups/constraints\",\n  \"draft\": false,\n  \"unlisted\": false,\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {\n    \"title\": \"Constraints\"\n  },\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Move Group\",\n    \"permalink\": \"/docs/core/groups/move\"\n  },\n  \"next\": {\n    \"title\": \"Group Controls\",\n    \"permalink\": \"/docs/core/groups/controls\"\n  }\n};\nexport const assets = {\n\n};\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport {DocRef} from '@site/src/components/ui/reference/docRef';\nexport const toc = [{\n  \"value\": \"Live Example\",\n  \"id\": \"live-example\",\n  \"level\": 2\n}];\nfunction _createMdxContent(props) {\n  const _components = {\n    admonition: \"admonition\",\n    h2: \"h2\",\n    p: \"p\",\n    ..._provideComponents(),\n    ...props.components\n  }, {CodeRunner} = _components;\n  if (!CodeRunner) _missingMdxReference(\"CodeRunner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.admonition, {\n      type: \"warning\",\n      children: _jsx(_components.p, {\n        children: \"Constraints come with several caveats. They are not serialized with layouts and can only be applied to groups.\"\n      })\n    }), \"\\n\", _jsx(DocRef, {\n      declaration: \"DockviewGroupPanelApi\",\n      methods: ['setConstraints', 'onDidConstraintsChange']\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"live-example\",\n      children: \"Live Example\"\n    }), \"\\n\", _jsx(CodeRunner, {\n      id: \"dockview/constraints\"\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n\n"],"names":["codifyType","value","tabs","type","values","map","_","isComparator","code","join","lhs","rhs","typeArguments","codify","Error","kind","signature","repeat","name","returnType","flags","isProtected","isReadonly","isOptional","typeParameters","length","typeParameter","typeCode","extends","default","parameters","parameter","properties","Math","max","signatures","children","filter","console","log","newJson","docsJson_","Text","props","_jsx","className","content","piece","i","text","substring","Tags","tags","tag","_jsxs","Summary","summary","blockTags","Row","comment","doc","style","width","display","flexDirection","alignItems","fontFamily","fontSize","CodeBlock","language","docs","methods","v","flat","flatMap","concat","child","includes","DocRef","React","declaration","filteredDocs","_Fragment","frontMatter","title","contentTitle","undefined","metadata","assets","toc","_createMdxContent","_components","admonition","h2","p","components","CodeRunner","id","component","_missingMdxReference","MDXContent","wrapper","MDXLayout"],"sourceRoot":""}